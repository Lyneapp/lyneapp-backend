- Twilio - SMS Verification
- Security - Spring Security

- Don't put credentials in the version control system. Use configMaps and create an application.properties file for each environment.
- Consider using java optionals

---------
TO-DO
---------

## Create the implementation for a change password feature
## Create implementation for a change phone number feature
## Create a separate Database table for storing user password (i.e. user's ID or phone number and password columns


TO DO

1. Error handling: Implement proper error handling using exception classes and a centralized exception handler. This allows you to manage errors effectively and return appropriate HTTP status codes and error messages to the client. You can use the @ControllerAdvice annotation to create a global exception handler.

2. User input validation: Add validation for user inputs in the request models (e.g., RegisterRequest, LoginRequest, and VerifyRequest). You can use Java Bean Validation with annotations like @NotNull, @Size, and @Pattern to enforce constraints on the request fields.

3. JWT-based authentication: Implement JWT-based authentication instead of a simple password comparison in the loginUser method. By using JWT, you can generate secure tokens for users to authenticate subsequent requests. You'll need to create JWT utility methods to generate and validate tokens and configure Spring Security to use JWT for authentication.

4. Update UserPrincipal class methods: The isAccountNonExpired, isAccountNonLocked, isCredentialsNonExpired, and isEnabled methods in the UserPrincipal class currently return false. Update them to return appropriate values based on the User object, e.g., isEnabled should return the value of user.isAccountEnabled().

5. Secure sensitive data: Remove the getPassword method from the User model and avoid exposing the password in the UserPrincipal class. You can store the password hash in a separate database table or use other means to prevent exposing sensitive user data.

6. Implement user roles and authorities: If your application requires different user roles (e.g., admin, premium user, regular user), you can add a role field to the User model and update the getAuthorities method in the UserPrincipal class to return appropriate authorities based on the user's role.

7. Use a service to send SMS: Refactor the sendVerificationCode method in the AuthenticationService class to use a separate service class to handle sending SMS messages. This makes it easier to swap out the SMS provider in the future and adhere to the single responsibility principle.

8. Unit tests and integration tests: Write unit tests for your services and repositories to ensure the functionality of your application. Also, create integration tests to validate the interactions between different components and test your API endpoints.

9. API documentation: Add API documentation using tools like Swagger or Spring REST Docs. This will help frontend developers understand and use your API endpoints more effectively.

10. Pagination and filtering: Implement pagination and filtering for endpoints that return lists of data. This improves performance and provides a better user experience when dealing with large datasets